name: CI

on:
  push:
  workflow_dispatch:

jobs:
  setup:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up PowerShell script
      run: |
        # Download Tailscale
        $tailscaleUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe"
        $installerPath = "tailscale-installer.exe"
        # Ensure the file is downloaded successfully
        try {
          Invoke-WebRequest -Uri $tailscaleUrl -OutFile $installerPath
          Write-Output "Tailscale installer downloaded successfully."
        } catch {
          Write-Error "Failed to download Tailscale installer."
          exit 1
        }
        # Install Tailscale
        try {
          Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
          Write-Output "Tailscale installed successfully."
        } catch {
          Write-Error "Failed to install Tailscale."
          exit 1
        }
        # Add Tailscale to PATH
        $tailscalePath = "C:\Program Files\Tailscale\"
        if (-Not ($env:PATH -contains $tailscalePath)) {
          $env:PATH += ";$tailscalePath"
          Write-Output "Tailscale path added to PATH."
        }
        # Authenticate with Tailscale
        $Env:TAILSCALE_AUTH_KEY = "${{ secrets.TAILSCALE_AUTH_KEY }}"
        try {
          Start-Process cmd.exe -ArgumentList "/c tailscale up --authkey=$Env:TAILSCALE_AUTH_KEY --unattended" -Wait
          Write-Output "Tailscale authenticated successfully."
        } catch {
          Write-Error "Failed to authenticate with Tailscale."
          exit 1
        }
        # Verify Tailscale connection
        $tailscaleStatus = & "C:\Program Files\Tailscale\tailscale.exe" status
        Write-Output "Tailscale Status: $tailscaleStatus"
        
        # Enable Remote Desktop after Tailscale is connected
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        # Retrieve user credentials from secrets
        $runnerUsername = "${{ secrets.RUNNER_USERNAME }}"
        $runnerPassword = ConvertTo-SecureString -AsPlainText "${{ secrets.RUNNER_PASSWORD }}" -Force
        # Create or update runneradmin user
        if (Get-LocalUser -Name $runnerUsername -ErrorAction SilentlyContinue) {
            Set-LocalUser -Name $runnerUsername -Password $runnerPassword
        } else {
            New-LocalUser -Name $runnerUsername -Password $runnerPassword -UserMayNotChangePassword -PasswordNeverExpires -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member $runnerUsername
        }
        # Keep the script running
        while ($true) {
          Start-Sleep -Seconds 300
        }
      shell: pwsh
      env:
        TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        RUNNER_USERNAME: ${{ secrets.RUNNER_USERNAME }}
        RUNNER_PASSWORD: ${{ secrets.RUNNER_PASSWORD }}
